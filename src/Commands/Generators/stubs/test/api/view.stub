<?php

namespace {{ namespace }};

use {{ modelNamespace }}\{{ model }};
use App\Ship\Abstracts\Tests\TestCase;
use Illuminate\Testing\Fluent\AssertableJson;

/**
 * @group {{ moduleKey }}
 * @group api
 */
class {{ class }} extends TestCase
{
    /**
     * Roles and permissions, to be attached on the user by default
     */
    protected array $access = [
        'permissions' => 'view-{{ modelPermissionEntity }}',
        'roles'       => '',
    ];

    public function test_view_{{ modelSnake }}(): void
    {
        $this->getTestingUser();

        ${{ modelEntity }} = {{ model }}::factory()->create();
        $expectedData = ${{ modelEntity }}->toArray();

        $this->getJson(route('{{ routeName }}', ['{{ modelEntity }}' => ${{ modelEntity }}->getKey()]))
            ->assertOk()
            ->assertJson(fn (AssertableJson $json) =>
                $json->has('data', fn (AssertableJson $json) =>
                    $json->whereAll($expectedData)
                        ->etc()
                )
            );
    }

    public function test_view_{{ modelSnake }}_without_access(): void
    {
        $this->getTestingUserWithoutAccess();

        ${{ modelEntity }} = {{ model }}::factory()->create();

        $this->getJson(route('{{ routeName }}', ['{{ modelEntity }}' => ${{ modelEntity }}->getKey()]))
            ->assertForbidden();
    }

    public function test_view_not_existing_{{ modelSnake }}(): void
    {
        $this->getTestingUser();

        $this->getJson(route('{{ routeName }}', ['{{ modelEntity }}' => 7777]))
            ->assertNotFound();
    }
}
