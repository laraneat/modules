<?php

namespace {{ namespace }};

use App\Ship\Abstracts\Tests\TestCase;
use Illuminate\Testing\Fluent\AssertableJson;
use {{ modelNamespace }}\{{ model }};

/**
 * @group {{ moduleNameLower }}
 * @group api
 */
class {{ class }} extends TestCase
{
    protected string $url = '{{ url }}';

    /**
     * Roles and permissions, to be attached on the user by default
     */
    protected array $access = [
        'permissions' => 'update-{{ modelPermissionEntity }}',
        'roles'       => '',
    ];

   public function testUpdate{{ model }}(): void
       {
           $this->getTestingUser();

           ${{ modelEntity }} = {{ model }}::factory()->create();

           $url = $this->buildUrl(
               replaces: ['{id}' => ${{ modelEntity }}->getKey()]
           );

           $data = [
               //
           ];
           $expectedData = array_merge($data, [
               'id' => ${{ modelEntity }}->getKey(),
           ]);

           $this->patchJson($url, $data)
               ->assertOk()
               ->assertJson(fn (AssertableJson $json) =>
                   $json->has('data', fn (AssertableJson $json) =>
                       $json->whereAll($expectedData)
                           ->etc()
                   )
               );

           $this->assertExistsModelWithAttributes({{ model }}::class, $expectedData);
       }

       public function testUpdate{{ model }}WithoutAccess(): void
       {
           $this->getTestingUserWithoutAccess();

           ${{ modelEntity }} = {{ model }}::factory()->create();

           $url = $this->buildUrl(
               replaces: ['{id}' => ${{ modelEntity }}->getKey()]
           );
           $data = [
               //
           ];

           $this->patchJson($url, $data)
               ->assertForbidden();
       }

       public function testUpdateNonExisting{{ model }}(): void
       {
           $this->getTestingUser();

           $fake{{ model }}Id = 7777;
           $url = $this->buildUrl(
               replaces: ['{id}' => $fake{{ model }}Id]
           );
           $data = [
               //
           ];

           $this->patchJson($url, $data)
               ->assertNotFound();
       }
}
