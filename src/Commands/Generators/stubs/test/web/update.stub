<?php

namespace {{ namespace }};

use App\Ship\Abstracts\Tests\TestCase;
use {{ modelNamespace }}\{{ model }};

/**
 * @group {{ moduleNameLower }}
 * @group web
 */
class {{ class }} extends TestCase
{
    /**
     * Roles and permissions, to be attached on the user by default
     */
    protected array $access = [
        'permissions' => 'update-{{ modelPermissionEntity }}',
        'roles'       => '',
    ];

    public function testUpdate{{ model }}(): void
    {
        $this->getTestingUser();

        ${{ modelEntity }} = {{ model }}::factory()->create();

        $data = [
            // TODO: add fields here
        ];
        $expectedData = array_merge($data, [
            'id' => ${{ modelEntity }}->getKey(),
        ]);

        $this->patch(route('{{ routeName }}', ['{{ modelEntity }}' => ${{ modelEntity }}->getKey()]), $data)
           ->assertOk();

        $this->assertExistsModelWithAttributes({{ model }}::class, $expectedData);
    }

    public function testUpdate{{ model }}WithoutAccess(): void
    {
        $this->getTestingUserWithoutAccess();

        ${{ modelEntity }} = {{ model }}::factory()->create();

        $data = [
            // TODO: add fields here
        ];

        $this->patch(route('{{ routeName }}', ['{{ modelEntity }}' => ${{ modelEntity }}->getKey()]), $data)
            ->assertForbidden();
    }

    public function testUpdateNonExisting{{ model }}(): void
    {
        $this->getTestingUser();

        $data = [
            // TODO: add fields here
        ];

        $this->patch(route('{{ routeName }}', ['{{ modelEntity }}' => 7777]), $data)
            ->assertNotFound();
    }
}
