<?php

namespace {{ namespace }};

use {{ modelNamespace }}\{{ model }};
use Tests\TestCase;

/**
 * @group {{ modulePackageName }}
 * @group web
 */
class {{ class }} extends TestCase
{
    /**
     * Roles and permissions, to be attached on the user by default
     */
    protected array $testUserAccess = [
        'permissions' => 'update-{{ modelKebabCase }}',
        'roles'       => '',
    ];

    protected function getTestData(array $mergeData = []): array
    {
        return array_merge([
            // TODO: add fields here
        ], $mergeData);
    }

    public function test_update_{{ modelSnakeCase }}(): void
    {
        $this->actingAsTestUser();

        ${{ modelCamelCase }} = {{ model }}::factory()->create();

        $data = $this->getTestData();
        $expectedData = array_merge($data, [
            'id' => ${{ modelCamelCase }}->getKey(),
        ]);

        $this->patch(route('{{ routeName }}', ['{{ modelCamelCase }}' => ${{ modelCamelCase }}->getKey()]), $data)
           ->assertOk();

        $this->assertDatabaseHas({{ model }}::class, $expectedData);
    }

    public function test_update_{{ modelSnakeCase }}WithoutAccess(): void
    {
        $this->actingAsTestUserWithoutAccess();

        ${{ modelCamelCase }} = {{ model }}::factory()->create();

        $data = $this->getTestData();

        $this->patch(route('{{ routeName }}', ['{{ modelCamelCase }}' => ${{ modelCamelCase }}->getKey()]), $data)
            ->assertForbidden();
    }

    public function test_update_non_existing_{{ modelSnakeCase }}(): void
    {
        $this->actingAsTestUser();

        $data = $this->getTestData();

        $this->patch(route('{{ routeName }}', ['{{ modelCamelCase }}' => 7777]), $data)
            ->assertNotFound();
    }
}
