<?php

namespace App\Modules\Blog\UI\API\Tests;

use App\Modules\Blog\Models\PostComment;
use App\Ship\Abstracts\Tests\TestCase;
use Illuminate\Testing\Fluent\AssertableJson;

/**
 * @group blog
 * @group api
 */
class UpdatePostCommentTest extends TestCase
{
    /**
     * Roles and permissions, to be attached on the user by default
     */
    protected array $access = [
        'permissions' => 'update-post-comment',
        'roles'       => '',
    ];

    protected function getTestData(array $mergeData = []): array
    {
        return array_merge([
            // TODO: add fields here
        ], $mergeData);
    }

    public function test_update_post_comment(): void
    {
        $this->getTestingUser();

        $postComment = PostComment::factory()->create();

        $data = $this-getTestData();
        $expectedData = array_merge($data, [
            'id' => $postComment->getKey(),
        ]);

        $this->patchJson(route('api.post_comments.update', ['postComment' => $postComment->getKey()]), $data)
            ->assertOk()
            ->assertJson(fn (AssertableJson $json) =>
                $json->has('data', fn (AssertableJson $json) =>
                    $json->whereAll($expectedData)
                        ->etc()
                )
            );

        $this->assertExistsModelWhereColumns(PostComment::class, $expectedData);
    }

    public function test_update_post_comment_without_access(): void
    {
        $this->getTestingUserWithoutAccess();

        $postComment = PostComment::factory()->create();

        $data = $this-getTestData();

        $this->patchJson(route('api.post_comments.update', ['postComment' => $postComment->getKey()]), $data)
            ->assertForbidden();
    }

    public function test_update_non_existing_post_comment(): void
    {
        $this->getTestingUser();

        $data = $this-getTestData();

        $this->patchJson(route('api.post_comments.update', ['postComment' => 7777]), $data)
            ->assertNotFound();
    }
}
