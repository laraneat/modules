<?php

namespace App\Modules\Article\UI\API\Tests;

use App\Modules\Article\Models\Article;
use App\Ship\Abstracts\Tests\TestCase;
use Illuminate\Testing\Fluent\AssertableJson;

/**
 * @group article
 * @group api
 */
class UpdateArticleTest extends TestCase
{
    protected string $url = '/api/v1/articles/{id}';

    /**
     * Roles and permissions, to be attached on the user by default
     */
    protected array $access = [
        'permissions' => 'update-article',
        'roles'       => '',
    ];

   public function testUpdateArticle(): void
       {
           $this->getTestingUser();

           $article = Article::factory()->create();

           $url = $this->buildUrl(
               replaces: ['{id}' => $article->getKey()]
           );

           $data = [
               //
           ];
           $expectedData = array_merge($data, [
               'id' => $article->getKey(),
           ]);

           $this->patchJson($url, $data)
               ->assertOk()
               ->assertJson(fn (AssertableJson $json) =>
                   $json->has('data', fn (AssertableJson $json) =>
                       $json->whereAll($expectedData)
                           ->etc()
                   )
               );

           $this->assertExistsModelWithAttributes(Article::class, $expectedData);
       }

       public function testUpdateArticleWithoutAccess(): void
       {
           $this->getTestingUserWithoutAccess();

           $article = Article::factory()->create();

           $url = $this->buildUrl(
               replaces: ['{id}' => $article->getKey()]
           );
           $data = [
               //
           ];

           $this->patchJson($url, $data)
               ->assertForbidden();
       }

       public function testUpdateNonExistingArticle(): void
       {
           $this->getTestingUser();

           $fakeArticleId = 7777;
           $url = $this->buildUrl(
               replaces: ['{id}' => $fakeArticleId]
           );
           $data = [
               //
           ];

           $this->patchJson($url, $data)
               ->assertNotFound();
       }
}
