<?php

namespace App\Modules\Article\UI\WEB\Tests\Baz\Bat;

use App\Modules\Article\Models\Some\Nested\SomeTestModel;
use App\Ship\Abstracts\Tests\TestCase;

/**
 * @group article
 * @group web
 */
class MyAwesomeWebUpdateTest extends TestCase
{
    /**
     * Roles and permissions, to be attached on the user by default
     */
    protected array $access = [
        'permissions' => 'update-some-test-model',
        'roles'       => '',
    ];

    protected function getTestData(array $mergeData = []): array
    {
        return array_merge([
            // TODO: add fields here
        ], $mergeData);
    }

    public function test_update_some_test_model(): void
    {
        $this->getTestingUser();

        $someTestModel = SomeTestModel::factory()->create();

        $data = $this-getTestData();
        $expectedData = array_merge($data, [
            'id' => $someTestModel->getKey(),
        ]);

        $this->patch(route('some.web.url', ['someTestModel' => $someTestModel->getKey()]), $data)
           ->assertOk();

        $this->assertExistsModelWhereColumns(SomeTestModel::class, $expectedData);
    }

    public function test_update_some_test_modelWithoutAccess(): void
    {
        $this->getTestingUserWithoutAccess();

        $someTestModel = SomeTestModel::factory()->create();

        $data = $this-getTestData();

        $this->patch(route('some.web.url', ['someTestModel' => $someTestModel->getKey()]), $data)
            ->assertForbidden();
    }

    public function test_update_non_existing_some_test_model(): void
    {
        $this->getTestingUser();

        $data = $this-getTestData();

        $this->patch(route('some.web.url', ['someTestModel' => 7777]), $data)
            ->assertNotFound();
    }
}
