<?php

namespace App\Modules\Article\UI\WEB\Tests\Baz\Bat;

use App\Modules\Article\Models\Some\Nested\SomeTestModel;
use App\Ship\Abstracts\Tests\TestCase;
use Illuminate\Testing\Fluent\AssertableJson;

/**
 * @group article
 * @group web
 */
class MyAwesomeWebUpdateTest extends TestCase
{
    protected string $url = '/some/web/url';

    /**
     * Roles and permissions, to be attached on the user by default
     */
    protected array $access = [
        'permissions' => 'update-some-test-model',
        'roles'       => '',
    ];

   public function testUpdateSomeTestModel(): void
       {
           $this->getTestingUser();

           $someTestModel = SomeTestModel::factory()->create();

           $url = $this->buildUrl(
               replaces: ['{id}' => $someTestModel->getKey()]
           );

           $data = [
               //
           ];
           $expectedData = array_merge($data, [
               'id' => $someTestModel->getKey(),
           ]);

           $this->patchJson($url, $data)
               ->assertOk();

           $this->assertExistsModelWithAttributes(SomeTestModel::class, $expectedData);
       }

       public function testUpdateSomeTestModelWithoutAccess(): void
       {
           $this->getTestingUserWithoutAccess();

           $someTestModel = SomeTestModel::factory()->create();

           $url = $this->buildUrl(
               replaces: ['{id}' => $someTestModel->getKey()]
           );
           $data = [
               //
           ];

           $this->patchJson($url, $data)
               ->assertForbidden();
       }

       public function testUpdateNonExistingSomeTestModel(): void
       {
           $this->getTestingUser();

           $fakeSomeTestModelId = 7777;
           $url = $this->buildUrl(
               replaces: ['{id}' => $fakeSomeTestModelId]
           );
           $data = [
               //
           ];

           $this->patchJson($url, $data)
               ->assertNotFound();
       }
}
